 fonction mini


def mini(l):
	mi=0
	for i in range(len(l)):
		if l[mi]>l[i]:
			mi=i
	return mi

print(suite[mini(suite)])


____________________________________________________
____________________________________________________
convertir secondes/heures

n= nbre de secondes

	
	h=n/3600

n=n-(h*3600)

	m=n/60

n=n-(m*60)

	s=n
	----------------------------------------


h=n//3600
n=n%3600
m=n//60
n=n%60
print (h,m,n)

---------------------------------------------------------



n=int(input("Entrez les secondes à calculer"))

mo=n//2629743
n=n%2629743
se=n//604800
n=n%604800
j=n//86400
n=n%86400
h=n//3600
n=n%3600
m=n//60
n=n%60

print (mo, "Mois,",se, "Sem,", j,"J,",h,"H,",m,"min,",n, "sec.")
    

_____________________________________________________________________________________
_____________________________________________________________________________________


convertir prix HT/TTC

a=10
b=a+(a*0.2)

print (b)

----------------------------------

a=float(input("Prix HT"))

b=a+(a*0.2)

print (b,"TTC")



_____________________________________________________________________________________
_____________________________________________________________________________________



MDP

a = "motdepasse1234"
Count=0

while Count < 3:
    password = input("Insert Password - Max 4 Tentatives")
    if password == a :
        print ("OK")
    
    else :
        print("RE-essayez")
        print ("Tentatives:",Count+1)
        Count=Count+1

-----------------

a = "motdepasse1234"
Count=0
Tent=3

while Count < 3:
    password = input("Insert Password - Max 3 Tentatives")
    if password == a :
        print ("OK")
    
    else :
        print("RE-essayez")
        print ("Tentatives restantes:",Tent-1)
        Tent=Tent-1
        Count=Count+1

-----------------------


a = "motdepasse1234"
Count=0
Tent=3

while Count < 3:
    password = input("Entrez votre Mot de passe  - !!Vous n'avez droit qu'à 3 tentatives!!")
    if password == a :
        print ("Mot de passe valide")
        Count=Count+3
    
    else :
        print("              Mauvais mot de passe - essayez à nouveau               ")
        print("                    Tentatives restantes:"                    ,Tent-1 )
        print("                                                                     ")
        Tent=Tent-1
        Count=Count+1
        
if Tent==0:
        print("Compte bloqué - Contactez le support")

---------------------------------------


pa="123"

def mdp():
    i=0
    ten=3
    while i<3 :
        mdp=input("Entrez votre mot de passe")
        if mdp==pa:
            print("Accès autorisé")
        else:
            ten=ten-1
            print("Faux",ten,"tentatives restantes")
        if ten==0:
            i=i+3
            print("Compte bloqué")
mdp()
        
_____________________________________________________________________________________
_____________________________________________________________________________________



parité

a=int(input("entrez un nombre"))
    
if a%2 == 0 :
    print("Pair")

else :
    print("Impair")

_____________________________________________________________________________________
_____________________________________________________________________________________




Résoudre l'équation du  2nd degré ax²+bx=c

import math

print ("Résoudre l'équation du  2nd degré ax²+bx=c")

a=int(input("entrez le terme a"))
b=int(input("entrez le terme b"))
c=int(input("entrez le terme c"))

D=(b*b)-4*a*c
print("Delta=",D)

if D==0:
    print("x1=",-b/(2*a))
    
if D>0:
    print ("x1=", (-b + math.sqrt(D))/(2*a))
    print ("x2=", (-b - math.sqrt(D))/(2*a))
    
if D<0:
    print ("Pas de solution")

________________________________________________________________________________________
________________________________________________________________________________________

puissance

x=int(input("entrez x"))
n=int(input("entrez n"))
t=0
c=1

while t!=n:
    c=c*x
    t=t+1
    print(c)

ou


def puissance(a,b):
    res=1
    i=0
    while i<b:
        res=res*a
        i=i+1
    return res
          
a=float(input("Entrez un nombre"))
b=int(input("Entrez la puissance"))
x=puissance(a,b)
print (x)

    

_______________________________________________________________________________________
_______________________________________________________________________________________

epargne simple%

a=int(input("entrez le nbre d'années"))
capital=200
inter=capital*0.02
t=0


while t!=a:
    solde=capital+inter
    print(solde)
    capital=solde
    t=t+1

ou


solde=200

for i in range (50):
    solde=solde*1.02
    print("année: ",i+1,"solde:", solde)


ou

def solde(cap,inter):
    for i in range(51):
        cap=cap*(1+inter/100)
        print("Année",i,":",cap,"euros")        
inter=float(input("Entrez le taux d'interêts"))
cap=int(input("Entrez le capital de départ"))

solde(cap,inter)


EPARGNE AVEC RECURSIVITE

def epar(n):
    if n==0:
        return 200     #capital de depart
    else:
        return 1.02*epar(n-1)    #interets à 2%
        
print(epar(2))




_______________________________________________________________________________________
_______________________________________________________________________________________

epargne cumulative

a=int(input("entrez l'âge"))
x=200
age=0

while age!=a+1:
    solde=x+(age*2)
    print("année",age,solde)
    x=solde
    age=age+1


ou


solde=200
a=int(input("âge"))

for i in range (a):
    solde=solde+i*2
    print("année: ",i,"solde:", solde)


ou

def cumul(solde,a):
    for i in range (a):
        solde=solde+i*2
        print("année: ",i+1,"solde:", solde)
solde=int(input("Entrez la somme de départ"))
a=int(input("âge"))      
cumul(solde,a)


EPARGNE CUMULATIVE AVEC RECURSIVITE

def somme(l):
    if len(l)==0:
        return 0
    else:
        return l[0]+somme(l[1:])
        
liste=[1,2,1,2,1,3,2,3]
print(somme(liste))




_______________________________________________________________________________________
_______________________________________________________________________________________

factorielle

n=int(input("entrez un nombre"))
y=1

for i in range (1,n+1):
    y=y*i
print(n,"!","=",y)










_______________________________________________________________________________________
_______________________________________________________________________________________

table de multi


n=int(input("table de"))

for i in range(1,10):
    result=n*i
    print(i,"x",n,"=",result)





_______________________________________________________________________________________
_______________________________________________________________________________________




verif si liste dans l'ordre avec RECURSIVITE

l1=[-65,1,2,4,5,6,7,8,12,65,69,74,87,89,581]

def verif(l):
    if len(l)==1:
        return True
    elif l[0]<l[0+1]:
        return verif(l[1:])
    else:
        return False
    
print(verif(l1))



-----------------------------------------------------------



+liste avec while

liste=[4,6,11,32,7,5]
t=0
i=0

while i<len(liste):
    t=t+liste[i]
    print(t)
    i=i+1




+liste avec for

liste=[4,6,11,32,7,5]
result=0
for i in liste:
    result=result+i    # result += i #
    print(result)


----------------------------------------------------

moyenne liste

liste=[4,6,11,32,7,5]
t=0
for i in liste:
    t=t+i
    c=t/len(liste)
    print(c)

moyenne avec RECUR

L1=[4,6,3,2,56,11]

def moy(n):
    if len(n)==1:
        return n[0]
    else:
        return (moy(n[1:])*len(n[1:])+n[0])/len(n)
        
print(moy(L1))
------------------------------------------------




occurence de liste

liste1=[54,84,44,61,10,21,31,95,29,9,96,13,24,77,51,80,3,33,74,96,43,29,95,68,92,44,55,73,73,45,55,94,1,41,45,36,56,98,68,67,75,99,38,39,46,84,44,16,86,77]
liste2=[32,90,93,30,87,59,30,8,97,44,35,60,21,1,37,79,33,32,30,63,87,32,3,71,17,77,45,35,41,68,49,53,10,8,3,8,32,56,14,96,68,45,97,99,62,32,71,62,39,12]
liste3=[16,47,67,41,76,4,21,8,43,3,73,12,26,70,75,23,62,27,59,82,15,80,45,72,12,45,98,83,18,47,88,27,74,65,18,67,80,41,45,5,42,58,95,3,16,27,41,9,56,72]
m=input("Indiquez la liste à analyser")
def compt(l):
    n=int(input("Entrez la valeur à compter"))
    count=0
    for i in (l):
        if i==n:
            count+=1      #count += 1#
    return count
    
print(compt(m))

---------------------------------------------------

OCCURENCE AVEC RECURSIVITE

L1=[1,3,4,3,2,3,4,1,2,3,5,4,3]

def occu(l,n):
    if l==[]:
        return 0
    if l[0]==n:
        return 1 + occu(l[1:],n)
    else:
        return 0 + occu(l[1:],n)
        
print(occu(L1,n=int(input("Quelle valeur?"))))



----------------------------------------

compteur max:

numbers=[4,6,3,2,56,11,45,34,11,21,76,56,11,654,43,45,67,11,2,56,11,45,34,99]
max=numbers[0]

for i in numbers:
    if i>max:
        max=i
        print(max)



max avec RECURSIVITE

L1=[1,3,4,3,2,3,4,1,2,3,5,4,3]

def maxi(l):
    if len(l)==1:
        return l[0]
    elif l[0]<maxi(l[1:]):
        return maxi(l[1:])
    else:
        return l[0]
    
print(maxi(L1))

----------------------------------------------------

compteur max et mini:


numbers=[4,6,3,2,56,11,45,22,10,87,90,345,234,421,978,1024,34,11,21,76,56,11,654,43,45,67,11,2,56,11,45,34]
max=numbers[0]
mini=numbers[0]

for i in numbers:
    if i>max:
        max=i
print("maximum de la liste:",max)
        
for i in numbers:
    if i<mini:
        mini=i 
print("minimum de la liste:",mini)


!!!
A=[4,6,3,2,56,11,45,22,-10,87,90,345,234,421,978,1024,34,11,21,76,56,11,654,43,45,67,11,2,-56,11,45,-34]
B=[37,17,59,36,75,58,-4,36,46,46,68,81,57,61,34,-50,87,82,37,28,421,978,1024,34,11,21,76,56,11,654,43,45,-67,11]
C=[57,29,44,44,49,78,9,90,96,88,74,19,86,50,40,61,58,81,16,24,11,81,72,62,16,50,87,82,37,28,421,978,1024,34,11,2]
m=input("Liste à analyser: A,B ou C ? ")
def minmax(l):
    mini=l[0]
    maxi=l[0]
    for i in range(len(l)):
        if l[0]>l[i]:
            mini=i
            if l[0]<l[i]:
                maxi=i
    return mini,maxi

print("Les valeurs Mini et Maxi de la liste",m,"sont:",minmax(m))
!!!

__________________________________________________________________________________
__________________________________________________________________________________

triangle rectangle (4)


n=int(input("entrez valeur"))
for i in range(n):
    print((i+1)*"*")


AVEC RECURSIVITE

def trian(n):
    if n==1:
        return("*")
    else:
       return (trian(n-1)+("\n")+n*"*")
        
print(trian(6))


_____________________________________________________________
_____________________________________________________________

comparer 2 listes


number1=[4,6,3,2,56,11,45,22,10,87,90,345,234,421,978,1024,34,11,21,76,56,11,654,43,45,67,11,2,56,11,45,34]
number2=[4,6,3,2,56,11,45,22,10,87,90,345,234,421,978,1024,34,11,21,76,56,11,654,43,45,67,11,2,56,11,45,34]

t=True
cont=0
if len(number1)!=len(number2):
    t=False
while(t and cont < len(number1)):
        if number1[cont]!=number2[cont]:
            t=False
        cont= cont+1
if t:
    print ("identiques")
else:
    print ("différentes")

----------------------------------------

Comparer avec recursive

number1=[4,6,3,2,56,11,45,22,10,87,90,345,234,421,978,1024,34,11,21,76,56,11,654,43,45,67,11,2,56,11,45,34]
number2=[4,6,3,2,56,11,45,22,10,87,90,345,234,421,978,1024,34,11,21,76,56,11,654,43,45,67,11,2,56,11,45,34]

def cmp(l1,l2):
    if l1==[] and l2==[]:
        return True
    elif len(l1)!=len(l2):
        return False
    elif l1[0]==l2[0]:
        return cmp(l1[1:],l2[1:])
    else:
        return False
        
print(cmp(number1,number2))
     


__________________________________________________________________________________
__________________________________________________________________________________
juste prix

import random
prix=random.choice(range(101))

def jst(prix):
    i=0
    a=0
    while prix != a:
        a=int(input("Entrez un Nbre entre 1 et 100"))
        if prix==a:
            print("Gagné, Score:",i)
        if prix<a:
            print("Moins")
            i=i+1
        if prix>a:
            print("Plus")
            i=i+1
jst(prix)
        

------------------------------------------------------
ordi joue 

import random
lis=list(range(101))
prix=int(input("Entrez un nbre de 1 à 100"))
i=0
a=0
v=0
w=0

while a!=prix:
    a=random.choice(lis)
    if a==prix:
        print(a,"Gagné! Score:",i)
    elif a>prix:
        v=lis.index(a)
        lis=lis[ :v]
        i=i+1
        print("Moins",a)
    elif a<prix:
        w=lis.index(a)
        lis=lis[w: ]
        i=i+1
        print("Plus",a)
        


__________________________________________________________________________________
__________________________________________________________________________________


__________________________________________________________________________________
__________________________________________________________________________________
pierre feuille ciseaux

import random
p="pierre"
f="feuille"
c="ciseaux"
player=0
AI=0
while player<3 and AI<3:
    playh=input("pierre feuille ciseaux?")
    playAI=random.choice([p,f,c])
    if playh==p and playAI==c:
        player=player+1
        print("Joueur gagne! Score:  Joueur:",player,"   AI:",AI)
    elif playh==f and playAI==p:
        player=player+1
        print("Joueur gagne! Score:  Joueur:",player,"   AI:",AI)
    elif playh==c and playAI==f:
        player=player+1
        print("Joueur gagne! Score:  Joueur:",player,"   AI:",AI)
    elif playh==playAI:
        print("NUL")
    else:
        AI=AI+1
        print("AI gagne avec",playAI,"Score:  Joueur:",player,"   AI:",AI)

----------------------------------------

pierre feuille ciseaux lezard spock


import random
regles="Les ciseaux coupent la feuille, la feuille bat la pierre, la pierre écrase le lézard, le lézard empoisonne Spock, les ciseaux décapitent le lézard, le lézard mange la feuille, la feuille désavoue Spock, Spock détruit la pierre, La pierre casse les ciseaux"
p="pierre"
f="feuille"
c="ciseaux"
l="lézard"
s="spock"
player=0
AI=0

def score(player,AI):
    player=player+1
    print("Joueur gagne! Score:  Joueur:",player,"   AI:",AI)
    return player,AI

def pfc(player,AI):
    print(regles)
    while player<3 and AI<3:
        playh=input("\n pierre feuille ciseaux lézard spock?")
        playAI=random.choice([p,f,c,l,s])
        if playh==p and playAI==c:
            score(player,AI)
        elif playh==p and playAI==l:
            score(player,AI)
        elif playh==f and playAI==p:
            score(player,AI)
        elif playh==f and playAI==s:
            score(player,AI)
        elif playh==c and playAI==f:
            score(player,AI)
        elif playh==c and playAI==l:
            score(player,AI)
        elif playh==l and playAI==s:
            score(player,AI)
        elif playh==l and playAI==f:
            score(player,AI)
        elif playh==s and playAI==c:
            score(player,AI)
        elif playh==s and playAI==p:
            score(player,AI)
        elif playh==playAI:
            print("NUL")
        else:
            AI=AI+1
            print("AI gagne avec",playAI,"   Score:  Joueur:",player,"   AI:",AI)
    return player,AI
pfc(player,AI)
            







__________________________________________________________________________________
__________________________________________________________________________________
PENDU

import random
mots=["ordinateur","processeur","algorithme","circonscription","declaration","supposition","guepard","style","logarithme"]
rando=random.choice(mots)
tent=7
disp=""

for l in rando:
    disp=disp+"-"
    
def lettre():
    global disp,rando
    lisdisp=list(disp)
    for i in range(len(rando)):
        if prop==rando[i]:
            lisdisp[i]=prop
    disp="".join(lisdisp)
    
def affichage():
    if tent==6:
        print("\n__││__")
    if tent==5:
        print("\n  ││  ","\n  ││  ","\n__││__")
    if tent==4:
        print("\n  ││  ","\n  ││  ","\n  ││  ","\n  ││  ","\n__││__")
    if tent==3:
        print("\n   _________","\n  ││  ","\n  ││  ","\n  ││  ","\n  ││  ","\n__││__","    █")
    if tent==2:
        print("\n   _________","\n  ││       │  ","\n  ││       Õ  ","\n  ││      /│\  ","\n  ││       ║  ","\n__││__","    █")
    if tent==1:
        print("\n   _________","\n  ││       │  ","\n  ││       Õ  ","\n  ││      /│\  ☺","\n  ││       ║  /│\ ","\n__││__","    █","  ║ ")
    if tent==0:
        print("\n   _________","\n  ││       │  ","\n  ││      \Õ/ ","\n  ││       │   ☺","\n  ││     └─│  /│\ ","\n__││__","▄▄   ","└─│ ")
        print("\n PERDU ")
    
    
print("Le jeu du pendu \n")

while tent > 0:
    print("Mot à trouver: ",disp,"\n")
    prop=input("Proposez une lettre: ")
    if prop in rando:
       lettre() 
    else:
        tent=tent-1
        affichage()
    if prop==rando:
        print("  Gagné !!")
        break
    if disp==rando:
        print("  Gagné  !!")
        break

          
________________________________________________________________
________________________________________________________________

Morpion


l1=[1,2,3]  #3 listes pour structurer la grille de jeu
l2=[4,5,6]
l3=[7,8,9]
joueur1=False #Etat initial des joueurs pour definir la victoire
joueur2=False
c=0  #compteur de tours pour le match nul

#fonction d'affichage
def grille():       
    global l1,l2,L3
    print(l1[0],"|",l1[1],"|",l1[2])
    print("─","┼","─","┼","─")
    print(l2[0],"|",l2[1],"|",l2[2])
    print("─","┼","─","┼","─")
    print(l3[0],"|",l3[1],"|",l3[2])
    
#calcul du Score du joueur 1    
def score1():       
    joueur1=False
    if l1.count("O")==3 or l2.count("O")==3 or l3.count("O")==3:
        joueur1=True
    elif l1[0]=="O" and l2[0]=="O" and l3[0]=="O":
        joueur1=True
    elif l1[1]=="O" and l2[1]=="O" and l3[1]=="O":
        joueur1=True
    elif l1[2]=="O" and l2[2]=="O" and l3[2]=="O":
        joueur1=True
    elif l1[0]=="O" and l2[1]=="O" and l3[2]=="O":
        joueur1=True
    elif l1[2]=="O" and l2[1]=="O" and l3[0]=="O":
        joueur1=True
    return joueur1
    
#calcul du Score du joueur 2        
def score2():           
    joueur2=False
    if l1.count("X")==3 or l2.count("X")==3 or l3.count("X")==3:
        joueur2=True
    elif l1[0]=="X" and l2[0]=="X" and l3[0]=="X":
        joueur2=True
    elif l1[1]=="X" and l2[1]=="X" and l3[1]=="X":
        joueur2=True
    elif l1[2]=="X" and l2[2]=="X" and l3[2]=="X":
        joueur2=True
    elif l1[0]=="X" and l2[1]=="X" and l3[2]=="X":
        joueur2=True
    elif l1[2]=="X" and l2[1]=="X" and l3[0]=="X":
        joueur2=True
    return joueur2
    
#conditions de victoire
def vict():       
    if joueur1==True:
        print("\n !!!Joueur 1 à gagné!!!")
    elif joueur2==True:
        print("\n !!!Joueur 2 à gagné!!!")
    else:
        if joueur1==False and joueur2==False and c==9:
            print("\n Match Nul!")
            
#Boucle de jeu principale
while joueur1==False and joueur2==False:    
    grille()
    joueur2=score2()
    vict()
    c=c+1
    j1=int(input("Joueur 1: Sur quelle case placer un rond?"))
    l1=["O" if value==j1 else value for value in l1]
    l2=["O" if value==j1 else value for value in l2]
    l3=["O" if value==j1 else value for value in l3]
    grille()
    joueur1=score1()
    vict()
    c=c+1
    j2=int(input("Joueur 2: Sur quelle case placer une croix?"))
    l1=["X" if value==j2 else value for value in l1]
    l2=["X" if value==j2 else value for value in l2]
    l3=["X" if value==j2 else value for value in l3]


______________________________________________________________
______________________________________________________________
tri selectif par nouvelle liste
liste=[14,32,4,56,11,9,23,1,56,65,5]

def trier(liste):
    liste2=[]
    while liste:
        mini=min(liste)
        liste.remove(mini)
        liste2.append(mini)
    return liste2
    
    
print(trier(liste))



---------------------------------------------------------

tri selectif par echange de valeurs

suite=[69,5,4,2,581,5,8,7,6,87,1,12,-65,74,89,65,4]
suite2=[34,56,67,32,23,2,58,-6,87,1,12,65,74,89,65,-4]
suite3=[99,78,67,20,21,19,4,2,123,15,7,974,89,65,4]

def mini(l):
	mi=0
	for i in range(len(l)):
		if l[mi]>l[i]:
			mi=i
	return mi

def echange(l,i,j):
	t=0
	t=l[i]
	l[i]=l[j]
	l[j]=t
	return l
				 
def triage(l):
	compteur = 0
	while compteur < len(l):
		m=mini(l[compteur:])
		l=echange(l,compteur,m+compteur)
		compteur +=1
	return(l)	
	
print(triage(suite))

-----------------------------------------------
TRI SELECTIF ECHANGE DE VALEUR RECURSIVITE

suite=[69,5,4,2,581,5,8,7,6,87,1,12,-65,74,89,65,4]

def mini(l):
	mi=0
	for i in range(len(l)):
		if l[mi]>l[i]:
			mi=i
	return mi

def echange(l,i,j):
	t=0
	t=l[i]
	l[i]=l[j]
	l[j]=t
	return l
				 
def selec(l):
    if len(l)==1:
        return l
    else:
        l=echange(l,mini(l),0)
        return [l[0]]+selec(l[1:])

        
print(selec(suite))


_________________________________________________________
_________________________________________________________
tri bubble (echange intégré)

suite=[18,5,8,7,69,5,4,2,58,6,87,1,12,65,74,89,65,4]

def tri(l):
    swap=True
    compteur=(len(l))
    while swap:
        swap=False
        for i in range(compteur-1):
            if l[i]>l[i+1]:
                l[i],l[i+1]=l[i+1],l[i]
                swap=True
        compteur-=1
        print(suite[:compteur])
    return l  
    
print(tri(suite))

-------------------------------------------
echange bubble+fonction echange

suite=[18,5,8,7,69,5,4,2,58,6,87,1,12,65,74,89,65,4]

def echange(l,i,j):
    buf=0
    buf=l[i]
    l[i]=l[j]
    l[j]=buf
    return l
    
def tri(l):
    swap=True
    compteur=(len(l))
    while swap:
        swap=False
        for i in range(compteur-1):
            if l[i]>l[i+1]:
                l=echange(suite,i,i+1)
                swap=True
        compteur-=1
        print(suite[:compteur])
    return l  
    
print(tri(suite))

------------------------------------------------
TRI BUBBLE RECURSIVITE

suite=[69,5,4,2,581,5,8,7,6,87,1,12,-65,74,89,65,4]

def echange(l,i,j):
	t=0
	t=l[i]
	l[i]=l[j]
	l[j]=t
	return l
				 
def bub(l):
    if len(l)==1:
        return l
    else:
        for i in range(len(l)-1):
            if l[i]>l[i+1]:
                l=echange(l,i,i+1)
        return bub(l[:-1])+[l[-1]]
        
print(bub(suite))
__________________________________________________________________________________
__________________________________________________________________________________
               
TRI par insertion

suite=[18,5,8,7,69,5,4,2,58,6,87,1,12,65,74,89,65,4]

def insert(l):
    n=len(l)
    for i in range(1,n):
        m=i-1
        buf=l[i]
        while m>=0 and l[m]>buf:
            l[m+1]=l[m]
            m=m-1
        l[m+1]=buf
    return l
    
print(insert(suite))

__________________________________________________________________________________
__________________________________________________________________________________
    

#suite de fibonacci
n=int(input("Quantité de nombres à afficher"))
suite=[0]*n
suite[0]=0
suite[1]=1

for i in range(2,n):
   suite[i] = suite[i-1] + suite[i-2]
    
print("Les ",n,"premiers nombres de la suite de Fibonacci sont",suite)

------------------------------------------------------------------------
FIBO AVEC RECURSIVITE

def fibo(n):
    if n<=1:
        return n
    else:
        return fibo(n-1)+ fibo(n-2)
        
print(fibo(n=int(input("Combien de valeurs à afficher?\n"))))

---------------------

avec affichage de toute la liste

def fibo(n):
    if n<=1:
        return [0,1]
    else:
        return fibo(n-1)+[(fibo(n-1)[n-1]+ fibo(n-2)[n-2])]
        
print(fibo(n=int(input("Combien de valeurs à afficher?"))))

__________________________________________________________________________________
__________________________________________________________________________________
 Verifier PALINDROME

def palin(n):
    if len(n)==1:
        return True
    elif n[0]==n[-1]:
        return palin(n[1:-1])
    else:
        return False
    
print(palin(n=input("Entrez un mot")))   

__________________________________________________________________________________
__________________________________________________________________________________

__________________________________________________________________________________
__________________________________________________________________________________
    

__________________________________________________________________________________
__________________________________________________________________________________
    

__________________________________________________________________________________
__________________________________________________________________________________
    

__________________________________________________________________________________
__________________________________________________________________________________
    

__________________________________________________________________________________
__________________________________________________________________________________
    

__________________________________________________________________________________
__________________________________________________________________________________
    

__________________________________________________________________________________
__________________________________________________________________________________
    

__________________________________________________________________________________
__________________________________________________________________________________
    

__________________________________________________________________________________
__________________________________________________________________________________
    









